@startuml
package game {
+abstract class Configuration {
    -{static}int fieldWidth = 10
    -{static}int fieldHeight = 10

    +{static}int getFieldWidth() 
    +{static}void setFieldWidth(int fieldWidth) 
    +{static}int getFieldHeight() 
    +{static}void setFieldHeight(int fieldHeight) 
}
+class Game {
    +{static}final int MAX_NUM_DECKS = 4
    -Player firstPlayer
    -Player secondPlayer
    -PlayersField firstPlayerField
    -EnemyField firstPlayerEnemyField
    -PlayersField secondPlayerField
    -EnemyField secondPlayerEnemyField
    -Status status
    -Viewable viewable
    -int numberOfDecks
    -enum Status 

    +Game() 
    +void init() 
    +void play() 
    -void changeGameStatus() 
    -void show() 
    +void setViewable(Viewable viewable) 
}
+class ShowInConsoleStrategy implements Viewable {
    ~StringBuilder display = new StringBuilder()
    +void show(AbstractField field, AbstractField enemyField) 
    -void getRow(int row, AbstractField field) 
    -char getValueOfSign(Cell.Sign sign) 
}
~class ShowInGuiStrategy implements Viewable {
    +void show(AbstractField field, AbstractField enemyField) 
}
~interface Viewable {
    ~void show(AbstractField field, AbstractField enemyField)
}
}
package field {
+abstract class AbstractField {
    #int fieldWidth
    #int fieldHeight
    #Cell[][] cells
    +enum Answer 

    +AbstractField() 
    #void init() 
    +Cell.Sign readFromCell(Point point) 
    +void writeInCell(Point point, Cell.Sign sign) 
    +String toString() 
}
+class Cell {
    -Sign sign
    +enum Sign 

    +Cell() 
    +void setSign(Sign sign) 
    +Sign getSign() 
}
+class EnemyField extends AbstractField {
    -Set<Point> ignoredCells
    -Point lastGetting

    +EnemyField() 
    +void update(Point point, Answer answer) 
    -void onSunk(Point point) 
    -void onGet(Point point) 
    +Set<Point> getIgnoredCells() 
    +Point getLastGetting() 
}
+class PlayersField extends AbstractField {
    -Set<Point> unavailableCells
    -int numberOfDecks

    +PlayersField() 
    +boolean addShip(Ship ship) 
    +Answer update(Point point) 
    -void addUnavailableCells(List<Point> points) 
    -boolean isSunk(Point point) 
    +int getNumberOfDecks() 
}
+class Point {
    -int column
    -int row

    +Point() 
    +Point(int column, int row) 
    +Point(String s) 
    +int getColumn() 
    +int getRow() 
    +String toString() 
    +boolean equals(Object o) 
    +int hashCode() 
}
+class Ship {
    ~Random random = new Random()
    -Point from
    -Orientation orientation
    -int length
    -List<Point> points
    +enum Orientation 
    +Ship(int length) 
    +List<Point> getPoints() 
    -void init() 
    -void setOrientation() 
    -void setFrom() 
}
}
package player {
~interface ArrangeShipsBehavior {
    ~void arrangeShips(PlayersField field)
}
+class FinishHimShootStrategy extends ImprovedRandomShootStrategy {
    +FinishHimShootStrategy(EnemyField enemyField) 
    +Point shoot() 
    -Point shoot(Point shot) 
}
+class ImprovedRandomShootStrategy extends RandomShootStrategy {

    +ImprovedRandomShootStrategy(EnemyField enemyField) 
    +Point shoot() 
}
+class InputFromUserStrategy implements ShootBehavior {
    -InputStream source
    -Scanner sc

    +InputFromUserStrategy() 
    +InputFromUserStrategy(InputStream source) 
    +Point shoot() 
    +void setSource(InputStream source) 
}
+class Player {
    #PlayersField field
    #EnemyField enemyField
    #ArrangeShipsBehavior arrangeShipsBehavior
    #ShootBehavior shootBehavior
    #int hitCount

    +Player(PlayersField field, EnemyField enemyField) 
    +void arrangeShips() 
    +Point shoot() 
    +void setArrangeShipsBehavior(ArrangeShipsBehavior arrangeShipsBehavior) 
    +void setShootBehavior(ShootBehavior shootBehavior) 
    +int getHitCount() 
    +void addHitCount() 
}
+class RandomArrangeShipsStrategy implements ArrangeShipsBehavior {

    +void arrangeShips(PlayersField field) 
}
+class RandomShootStrategy implements ShootBehavior {
    #EnemyField enemyField

    +RandomShootStrategy(EnemyField enemyField) 
    +Point shoot() 
}
~interface ShootBehavior {
    ~Point shoot()
}
}
Game o-- Player
Game o-- EnemyField
Game o-- Viewable
Game o-- PlayersField
EnemyField o-- Point
PlayersField o-- Point
Player o-- ArrangeShipsBehavior
Player o-- ShootBehavior
Player o-- EnemyField
Player o-- PlayersField
RandomShootStrategy o-- EnemyField
@enduml
